# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserEntity {
  id: ID!
  firstName: String!
  lastName: String!
  rut: String!
  email: String!
  role: UserRoles!
}

"""The roles a user can have in the system"""
enum UserRoles {
  Student
  Teacher
  Admin
  Parents
}

type AuthResponse {
  token: String!
  message: String!
  verificacion: Boolean!
  role: String!
  firstName: String!
  id: Float!
  isChangePassword: Boolean!
}

"""La entidad Subject que representa una asignatura"""
type SubjectEntity {
  id: ID!
  name: String!
  numberOfClasses: Float!
  idTeacher: Float!
}

type SubjectResponse {
  isCreateSubject: Boolean!
}

type UserWithAttendanceDto {
  user: UserEntity!
  totalAsist: Float!
  totalAbsences: Float!
}

type NoticeEntity {
  id: Float!
  title: String!
  description: String!
  imageUrl: String
}

type NoticeResponse {
  isCreateNotice: Boolean!
}

"""
La entidad Grade que representa una calificaci√≥n de un estudiante en una asignatura
"""
type GradeEntity {
  id: ID!

  """La nota obtenida"""
  grade: Float!

  """ID del estudiante"""
  studentId: Float!

  """ID de la asignatura"""
  subjectId: Float!
}

"""Entity representing a form with questions"""
type Form {
  """Unique identifier of the form"""
  id: ID!

  """Title of the form"""
  title: String!

  """Optional description of the form"""
  description: String

  """List of questions in the form"""
  questions: [String!]!

  """Date when the form was created"""
  createdAt: DateTime!

  """Date when the form was last updated"""
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Response {
  """Unique identifier of the form"""
  id: ID!

  """ID del formulario"""
  formId: Float!

  """ID del usuario"""
  userId: Float!

  """List of answers in the form"""
  answers: [String!]!
  submittedAt: DateTime!
}

type Query {
  getAllNotices: [NoticeEntity!]!

  """Busca un usuario por RUT"""
  findByRut(rut: String!): UserEntity!
  getAllUser: [UserEntity!]!

  """Obtiene todos los usuarios con rol de student"""
  getAllStudents: [UserEntity!]!

  """Obtiene los usuarios y su asistencia por asignatura"""
  listUsersBySubject(idSubject: Float!): [UserWithAttendanceDto!]!
  listSubject: [SubjectEntity!]!
  gradesByStudentId(studentId: Float!): [GradeEntity!]!
  gradesBySubjectId(subjectId: Float!): [GradeEntity!]!
  findGradeById(id: Float!): GradeEntity!
  getAllGrades: [GradeEntity!]!
  gradesByStudentAndSubject(studentId: Float!, subjectId: Float!): [GradeEntity!]!
  averageGradeByStudentAndSubject(studentId: Float!, subjectId: Float!): Float!

  """Fetch all forms"""
  forms: [Form!]!

  """Fetch a form by ID"""
  form(id: ID!): Form
  getId(id: Float!): Float!
  getAllResponses: [Response!]!
  getResponsesByFormId(formId: Float!): [Response!]!
  getResponseById(id: Float!): Response!
}

type Mutation {
  createNotice(title: String!, description: String!, imageUrl: String): NoticeResponse!

  """Create a new user (either student or teacher)"""
  createUser(createUserDto: CreateUserDto!): UserEntity!
  removeUser(rut: String!): Boolean!

  """Actualiza un usuario"""
  updateUser(rut: String!, updateUserDto: UpdateUserDto!): UserEntity!
  login(email: String!, password: String!): AuthResponse!
  forgotPass(email: String!): AuthResponse!
  register(firstName: String!, lastName: String!, rut: String!, email: String!, password: String!, role: String!): AuthResponse!
  changePassword(newPassword: String!): AuthResponse!

  """Marca la asistencia de los estudiantes"""
  takeAsist(createAsistInput: CreateAsistDto!): Boolean!

  """Create a new subject by providing the name and number of classes."""
  createSubject(
    """
    The input data for creating a new subject, including name and number of classes.
    """
    createSubjectInput: CreateSubjectDto!
  ): SubjectResponse!

  """Remove a subject by its name. Returns true if deletion is successful."""
  removeSubject(
    """The name of the subject to delete."""
    name: String!
  ): Boolean!
  updateSubject(createSubjectInput: UpdateSubjectDto!): Boolean!
  createGrade(createGradeDto: CreateGradeDto!): GradeEntity!
  updateGrade(id: Float!, updateGradeDto: UpdateGradeDto!): GradeEntity!
  deleteGrade(id: Float!): Boolean!

  """Create a new form"""
  createForm(createFormInput: CreateFormDto!): Form!

  """Delete a form by ID"""
  removeForm(id: ID!): Boolean!

  """Create a new response for a form"""
  createResponse(responseDto: ResponseDto!): Response!
}

input CreateUserDto {
  firstName: String!
  lastName: String!
  rut: String!
  email: String!
  role: UserRoles!
  password: String
}

input UpdateUserDto {
  firstName: String
  lastName: String
  email: String
}

input CreateAsistDto {
  asistencias: [CreateAsistItemDto!]!
}

input CreateAsistItemDto {
  idUser: Float!
  idSubject: Float!
  asist: Float!
  absences: Float!
}

input CreateSubjectDto {
  name: String!
  numberOfClasses: Int
}

input UpdateSubjectDto {
  name: String!
  newName: String
  numberOfClasses: Int
}

input CreateGradeDto {
  grade: Float!
  studentId: Float!
  subjectId: Float!
}

input UpdateGradeDto {
  grade: Float
  studentId: Float
  subjectId: Float
}

input CreateFormDto {
  """Title of the form"""
  title: String!

  """Optional description of the form"""
  description: String

  """List of questions in the form"""
  questions: [String!]!
}

input ResponseDto {
  """ID of the user who submitted the response"""
  userId: Float!

  """ID of the form being answered"""
  formId: Float!

  """List of answers in the form"""
  answers: [String!]!
}