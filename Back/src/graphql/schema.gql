# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserEntity {
  id: ID!
  firstName: String!
  lastName: String!
  rut: String!
  email: String!
  role: UserRoles!
}

"""The roles a user can have in the system"""
enum UserRoles {
  Student
  Teacher
  Admin
  Parents
}

type AuthResponse {
  token: String!
  message: String!
  verificacion: Boolean!
  role: String!
  firstName: String!
  lastName: String!
  rut: String!
  email: String!
  id: Float!
  isChangePassword: Boolean!
}

type CourseEntity {
  id: ID!
  nameCourse: String!
  level: CourseLevels!

  """Las asignaturas asociadas al curso"""
  subjects: [SubjectEntity!]!
}

"""Son los niveles de enseñansa de los colegios"""
enum CourseLevels {
  Basica
  Media
  Kinder
  PreKinder
}

"""La entidad Subject que representa una asignatura"""
type SubjectEntity {
  id: ID!
  name: String!

  """El curso al que pertenece la asignatura"""
  course: CourseEntity!
  numberOfClasses: Float!
  idTeacher: Float!
}

type SubjectResponse {
  isCreateSubject: Boolean!
}

type UserWithAttendanceDto {
  user: UserEntity!
  totalAsist: Float!
  totalAbsences: Float!
}

type NoticeEntity {
  id: Float!
  title: String!
  description: String!
  imageUrl: String
}

type NoticeResponse {
  isCreateNotice: Boolean!
}

"""
La entidad Grade que representa una calificación de un estudiante en una asignatura
"""
type GradeEntity {
  id: ID!

  """La nota obtenida"""
  grade: Float!

  """ID del estudiante"""
  studentId: Float!

  """ID de la asignatura"""
  subjectId: Float!
}

type SemesterEntity {
  id: ID!
  nameSemester: String!
  startDate: DateTime!
  endDate: DateTime!
  deadline: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Entity representing a form with questions"""
type Form {
  """Unique identifier of the form"""
  id: ID!

  """Title of the form"""
  title: String!

  """Optional description of the form"""
  description: String

  """List of questions in the form"""
  questions: [String!]!

  """Date when the form was created"""
  createdAt: DateTime!

  """Date when the form was last updated"""
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Response {
  """Unique identifier of the form"""
  id: ID!

  """ID del formulario"""
  formId: Float!

  """ID del usuario"""
  userId: Float!

  """List of answers in the form"""
  answers: [String!]!
  submittedAt: DateTime!
}

type Query {
  getAllNotices: [NoticeEntity!]!

  """Busca un usuario por RUT"""
  findByRut(rut: String!): UserEntity!
  getAllUser: [UserEntity!]!

  """Obtiene todos los usuarios con rol de student"""
  getAllStudents: [UserEntity!]!

  """Obtiene los usuarios y su asistencia por asignatura"""
  listUsersBySubject(idSubject: Float!): [UserWithAttendanceDto!]!

  """Listar todas las asignaturas."""
  listSubject: [SubjectEntity!]!

  """
  Obtener todas las asignaturas por ID de profesor, incluyendo el nombre del curso.
  """
  getAllSubjectByIdTeacher(
    """ID del profesor."""
    idTeacher: Int!
  ): [SubjectEntity!]!
  gradesByStudentId(studentId: Float!): [GradeEntity!]!
  gradesBySubjectId(subjectId: Float!): [GradeEntity!]!
  findGradeById(id: Float!): GradeEntity!
  getAllGrades: [GradeEntity!]!
  getAllCourse: [CourseEntity!]!
  getAllSemester: [SemesterEntity!]!

  """Fetch all forms"""
  forms: [Form!]!

  """Fetch a form by ID"""
  form(id: ID!): Form
  getId(id: Float!): Float!
  getAllResponses: [Response!]!
  getResponsesByFormId(formId: Float!): [Response!]!
  getResponseById(id: Float!): Response!
}

type Mutation {
  createNotice(title: String!, description: String!, imageUrl: String): NoticeResponse!

  """Create a new user (either student or teacher)"""
  createUser(createUserDto: CreateUserDto!): UserEntity!
  removeUser(rut: String!): Boolean!

  """Actualiza un usuario"""
  updateUser(rut: String!, updateUserDto: UpdateUserDto!): UserEntity!
  login(email: String!, password: String!): AuthResponse!
  forgotPass(email: String!): AuthResponse!
  register(firstName: String!, lastName: String!, rut: String!, email: String!, password: String!, role: String!): AuthResponse!
  changePassword(newPassword: String!): AuthResponse!

  """Marca la asistencia de los estudiantes"""
  takeAsist(createAsistInput: CreateAsistDto!): Boolean!

  """
  Crear una nueva asignatura proporcionando el nombre y número de clases.
  """
  createSubject(
    """
    Datos de entrada para crear una nueva asignatura, incluyendo nombre y número de clases.
    """
    createSubjectInput: CreateSubjectDto!
  ): SubjectResponse!

  """
  Crear una nueva asignatura como administrador proporcionando el nombre, número de clases, ID del curso y ID del profesor.
  """
  addNewSubjectAdmin(
    """
    Datos de entrada para que un administrador cree una nueva asignatura, incluyendo nombre, número de clases, ID del curso y ID del profesor.
    """
    createSubjectAdminInput: CreateSubjectAdminDto!
  ): SubjectResponse!

  """
  Eliminar una asignatura por su nombre. Retorna true si la eliminación es exitosa.
  """
  removeSubject(
    """El nombre de la asignatura a eliminar."""
    name: String!
  ): Boolean!

  """Actualizar una asignatura proporcionando los campos necesarios."""
  updateSubject(
    """Datos de entrada para actualizar una asignatura."""
    updateSubjectInput: UpdateSubjectDto!
  ): SubjectEntity!
  createGrade(createGradeDto: CreateGradeDto!): GradeEntity!
  updateGrade(id: Float!, updateGradeDto: UpdateGradeDto!): GradeEntity!
  deleteGrade(id: Float!): Boolean!
  createCourse(createCourseDto: CreateCourseDto!): Boolean!
  deleteCourseDto(deleteCourseDto: DeleteCourseDto!): Boolean!
  updateCourseDto(updateCourseDto: UpdateCourseDto!): Boolean!
  createSemester(createSemesterDto: CreateSemesterDto!): Boolean!
  deleteSemester(deleteSemesterDto: DeleteSemesterDto!): Boolean!
  updateSemester(updateSemesterDto: UpdateSemesterDto!): Boolean!

  """Create a new form"""
  createForm(createFormInput: CreateFormDto!): Form!

  """Delete a form by ID"""
  removeForm(id: ID!): Boolean!
}

input CreateUserDto {
  firstName: String!
  lastName: String!
  rut: String!
  email: String!
  role: UserRoles!
  password: String
}

input UpdateUserDto {
  firstName: String
  lastName: String
  email: String
}

input CreateAsistDto {
  asistencias: [CreateAsistItemDto!]!
}

input CreateAsistItemDto {
  idUser: Float!
  idSubject: Float!
  asist: Float!
}

input CreateSubjectDto {
  name: String!
  numberOfClasses: Int
  courseId: Int!
}

input CreateSubjectAdminDto {
  name: String!
  numberOfClasses: Int
  courseId: Int!
  idTeacher: Int!
}

input UpdateSubjectDto {
  name: String!
  newName: String
  numberOfClasses: Int
  courseId: Int
}

input CreateGradeDto {
  grade: Float!
  studentId: Float!
  subjectId: Float!
}

input UpdateGradeDto {
  grade: Float
  studentId: Float
  subjectId: Float
}

input CreateCourseDto {
  nameCourse: String!
  level: CourseLevels!
}

input DeleteCourseDto {
  nameCourse: String!
  level: CourseLevels!
}

input UpdateCourseDto {
  nameCourse: String!
  newName: String
  level: CourseLevels!
  newLevel: CourseLevels
}

input CreateSemesterDto {
  nameSemester: String!
  startDate: DateTime!
  endDate: DateTime!
  deadline: DateTime!
}

input DeleteSemesterDto {
  nameSemester: String!
}

input UpdateSemesterDto {
  nameSemester: String!
  newNameSemester: String
  startDate: DateTime
  endDate: DateTime
  deadline: DateTime
}

input CreateFormDto {
  """Title of the form"""
  title: String!

  """Optional description of the form"""
  description: String

  """List of questions in the form"""
  questions: [String!]!
}